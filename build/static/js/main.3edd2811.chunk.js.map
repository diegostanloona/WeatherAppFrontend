{"version":3,"sources":["home/components/SliderNavigation.js","shared/components/UIElements/LoadingSpinner.js","home/components/Earth.js","home/components/EarthContainer.js","shared/hooks/http-hook.js","home/pages/Home.js","shared/components/Navigation/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["SliderNavigation","props","useState","index","setIndex","isScrolling","window","onmousewheel","e","setTimeout","direction","deltaY","onScroll","rotateByClick","newIndex","onSwiped","originalX","originalY","endX","endY","deltaX","Xmovement","Math","abs","Ymovement","className","undefined","onClick","LoadingSpinner","asOverlay","Earth","globeLng","globeEl","useRef","useEffect","current","pointOfView","lat","lng","altitude","console","log","tilesData","weather","map","item","parseFloat","latt_long","split","material","THREE","load","consolidated_weather","weather_state_abbr","opacity","transparent","labelsData","text","title","normalize","replace","max_temp","toFixed","min_temp","callback","counter","animation","setInterval","clearInterval","ref","backgroundColor","globeImageUrl","width","tileMaterial","labelSize","tileWidth","tileHeight","tileAltitude","EarthContainer","isLoading","setIsLoading","activeHttpRequests","sendRequest","useCallback","url","a","method","body","headers","httpAbortCtrll","AbortController","push","fetch","signal","response","json","responseData","filter","reqCtrl","ok","Error","message","alert","forEach","abortCtrl","abort","useHttpClient","error","clearError","setWeather","fetchUsers","Home","Navbar","src","alt","Provider","value","color","size","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3edd2811.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport ReactSwipeEvents from 'react-swipe-events';\n\nimport './SliderNavigation.css';\n\nconst SliderNavigation = props => {\n\n    const [index, setIndex] = useState(0);\n\n    let counter = 0;\n    let isScrolling = false;\n\n    window.onmousewheel = e => {\n        if(!isScrolling){\n            isScrolling = true;\n            setTimeout(()=>{\n                isScrolling = false;\n            }, 5000);\n            const direction = e.deltaY > 0 ? 1 : -1;\n            props.onScroll(direction, () => {\n                if (direction === 1) {\n                    setIndex(index === 3 ? 0 : index + 1);\n                } else {\n                    setIndex(index === 0 ? 3 : index - 1);\n                }\n            });\n        }\n    }\n\n    const swipeHandler = (e, originalX, originalY, endX, endY, deltaX, deltaY) => {\n        const Xmovement = Math.abs(originalX - endX);\n        const Ymovement = Math.abs(originalY - endY);\n        if (Xmovement > 1 || Ymovement > 1) {\n            if (Ymovement < Xmovement / 2) {\n                let direction;\n                if (originalX - endX > 25) {\n                    direction = 1;\n\n                } else if (originalX - endX < -25) {\n                    direction = -1;\n                }\n                props.onScroll(direction, () => {\n                    if (direction === 1) {\n                        setIndex(index === 3 ? 0 : index + 1);\n                    } else {\n                        setIndex(index === 0 ? 3 : index - 1);\n                    }\n                });\n            }\n        }\n    }\n\n    const rotateByClick = newIndex => {\n      if(newIndex !== index){\n        const direction = newIndex-index;\n        props.onScroll(direction, () => {\n          setIndex(newIndex);\n        });\n      }\n    }\n\n    return (\n        <ReactSwipeEvents onSwiped={swipeHandler}>\n            <ul className=\"slider-navigation\">\n    \t\t\t<li className={index===0?\"active\":undefined} onClick={() => {rotateByClick(0)}}><span>.</span></li>\n    \t\t\t<li className={index===1?\"active\":undefined} onClick={() => {rotateByClick(1)}}><span>.</span></li>\n    \t\t\t<li className={index===2?\"active\":undefined} onClick={() => {rotateByClick(2)}}><span>.</span></li>\n    \t\t\t<li className={index===3?\"active\":undefined} onClick={() => {rotateByClick(3)}}><span>.</span></li>\n    \t\t</ul>\n        </ReactSwipeEvents>\n    );\n\n};\n\nexport default SliderNavigation;\n","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React, { useEffect, useRef, useState } from 'react';\nimport Globe from 'react-globe.gl';\n\nimport * as THREE from 'three';\n\nimport SliderNavigation from './SliderNavigation';\n\nimport './Earth.css';\n\nconst Earth = props => {\n\n\tlet globeLng = 0;\n\n    const globeEl = useRef();\n\n    const onScroll = (direction, callback) => {\n    \tlet counter = 0;\n    \tlet animation = setInterval(() => {\n    \t\tif(counter === 90 || counter === -90){\n    \t\t\tglobeLng += 90*direction;\n    \t\t\tcounter = 0;\n    \t\t\tcallback(direction);\n    \t\t\tclearInterval(animation);\n    \t\t}\n    \t\tcounter+=5*direction;\n    \t\tglobeEl.current.pointOfView({lat: 5, lng: globeLng+counter, altitude: 2.5});\n    \t}, 20);\n    }\n\n    useEffect(() => {\n\t\t  globeEl.current.pointOfView({lat: 5, lng: 0, altitude: 2.5});\n    }, []);\n\n\t\tconsole.log(\"PROPS\", props);\n\n  \tconst tilesData = props.weather.map(item => { return{\n  \t\t\t\t\t\t\t\t\t\t\t\tlat: parseFloat(item.latt_long.split(\",\")[0]),\n  \t\t\t\t\t\t\t\t\t\t\t\tlng: parseFloat(item.latt_long.split(\",\")[1]),\n  \t\t\t\t\t\t\t\t\t\t\t\tmaterial: new THREE.MeshLambertMaterial({\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tmap: new THREE.TextureLoader().load(`imgs/${item.consolidated_weather[0].weather_state_abbr}.png`),\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\topacity: \"1\",\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttransparent: true\n  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t})\n  \t\t\t\t\t\t\t\t\t\t\t}});\n\n    console.log(tilesData);\n\n\t\tconst labelsData = props.weather.map(item => {\n\t\t\treturn {\n\t\t\t\ttext: `${item.title.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\")} \\nMax: ${item.consolidated_weather[0].max_temp.toFixed(2)}°C \\nMin: ${item.consolidated_weather[0].min_temp.toFixed(2)}°C`,\n\t\t\t\tlat: parseFloat(item.latt_long.split(\",\")[0])-7,\n\t\t\t\tlng: parseFloat(item.latt_long.split(\",\")[1])\n\t\t\t}\n\t\t});\n\n\treturn(\n\t\t<>\n\t\t<SliderNavigation onScroll={onScroll}/>\n\t\t<div className=\"earth\">\n\t\t\t<Globe ref={globeEl} backgroundColor=\"rgba(0, 0, 0, 0)\" globeImageUrl=\"mercator.jpg\" width=\"20vw\" pointOfView={{lat: 90, lng: 0, altitude: 2.5}}\n\t\t\t tilesData={tilesData}\n\t\t\ttileMaterial=\"material\"\n\t\t\tlabelsData={labelsData}\n\t\t\tlabelSize={1.8}\n      \t\ttileWidth={10}\n      \t\ttileHeight = {10}\n      \t\ttileAltitude = {0.025}\n       \t\t/>\n\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Earth;\n\n\n/*\n\n\n\n*/\n","import React, { useState, useEffect } from 'react';\n\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nimport Earth from './Earth';\n\nconst EarthContainer = props => {\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [weather, setWeather] = useState([]);\n\n    useEffect(() => {\n    \tconst fetchUsers = async () => {\n    \t\ttry {\n    \t\t\tconst responseData = await sendRequest(`https://almondine-half-fowl.glitch.me/weather`, 'GET', null, {});\n    \t\t\tsetWeather(responseData.weather);\n    \t\t} catch(e) {\n    \t\t\tconsole.log(e);\n    \t\t}\n\n    \t};\n    \tfetchUsers();\n    }, []);\n\n    return(\n    \t<>\n    \t{!isLoading && weather &&\n    \t\t<Earth weather={weather}/>\n    \t}\n    \t{isLoading &&\n    \t\t<LoadingSpinner asOverlay/>\n    \t}\n    \t</>\n    );\n};\n\nexport default EarthContainer;\n","import { useState, useCallback, useRef, useEffect, useContext } from 'react';\n\n\nexport const useHttpClient = () => {\n\n\n    const [isLoading, setIsLoading] = useState(false);\n\n    const activeHttpRequests = useRef([]);\n\n    const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n        setIsLoading(true);\n        const httpAbortCtrll = new AbortController();\n        activeHttpRequests.current.push(httpAbortCtrll);\n        try {\n            const response = await fetch(url, {\n                method,\n                body,\n                headers,\n                signal: httpAbortCtrll.signal\n            });\n            console.log(response);\n            const responseData = await response.json();\n            activeHttpRequests.current = activeHttpRequests.current.filter(reqCtrl => reqCtrl !== httpAbortCtrll);\n\n            if (!response.ok) {\n                setIsLoading(false);\n                throw new Error(responseData.message);\n            }\n            setIsLoading(false);\n\n            return responseData;\n\n        } catch (e) {\n            setIsLoading(false);\n            console.log(e);\n            if (e.message !== 'Fetch is aborted' && e.message !== 'The user aborted a request.') {\n                console.log(e.message);\n            }\n            throw e;\n        }\n\n\n\n    }, [alert]);\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequests.current.forEach(abortCtrl => abortCtrl.abort());\n        };\n    }, []);\n\n    return { isLoading, sendRequest };\n};","import React, { useState } from 'react';\n\nimport SliderNavigation from '../components/SliderNavigation';\nimport EarthContainer from '../components/EarthContainer';\n\nimport './Home.css';\n\nconst Home = () => {\n\n\treturn(\n\t\t<>\n\t\t<div className=\"home__content\">\n\t\t\t<div className=\"home__earth-background\"></div>\n\t\t\t<EarthContainer/>\n\t\t\t<div className=\"home__left-section\"><span>This is just a <b>portfolio project</b></span></div>\n\t\t\t<div className=\"home__divider\"></div>\n\t\t\t<div className=\"home__right-section\"><span>This globe shows the weather in real time, you can spin it by scrolling the page. This concept could be use for a landing page i.e. showing the location of every employee in the company.</span><br/><button>I'm a cool button</button></div>\n\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default Home;\n","import React from 'react';\n\nimport { IconContext } from \"react-icons\";\nimport { HiMenuAlt4 } from \"react-icons/hi\";\n\nimport './Navbar.css';\n\nconst Navbar = () => {\n\treturn(\n\t\t<div className=\"navbar\">\n\t\t\t<div className=\"navbar__logo-container\">\n\t\t\t\t<img src=\"logo.png\" alt=\"Kings Crest Global Logo\"/>\n\t\t\t</div>\n\t\t\t<div className=\"navbar__menu-container\">\n\t\t\t\t<IconContext.Provider value={{ color: \"#FFFFFF\", size: \"2.5em\"}}>\n\t\t\t\t\t<HiMenuAlt4/>\n\t\t\t\t</IconContext.Provider>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Navbar;\n","import React from 'react';\n\nimport Home from './home/pages/Home';\nimport Navbar from './shared/components/Navigation/Navbar';\n\nfunction App() {\n  return (\n    <>\n      <Navbar/>\n      <Home/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}